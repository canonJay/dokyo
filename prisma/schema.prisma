generator client {
  provider = "prisma-client-js"
  output   = "../prisma/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid())
  username String? @unique
  email    String  @unique
  phone    String? @unique

  isSuccess  Boolean  @default(false) @map("is_success")
  balance    Int      @default(0) @map("balance")
  isVerified Boolean  @default(false) @map("is_verified")
  isBanned   Boolean  @default(false) @map("is_banned")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  role       Role     @default(USER)

  reviews Review[]

  products Product[]

  chats Chat[]

  messages Messages[]

  payments Payment[]

  OTPcode OTPcode[]

  @@map("users")
}

model OTPcode {
  id        String   @id @default(uuid())
  code      Int
  isSuccess Boolean  @default(false) @map("is_success")
  expiresAt DateTime
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  @@map("otp_codes")
}

model Category {
  id   String @id @default(uuid())
  name String

  products  Product[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("categories")
}

model Tag {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  products Product[]

  @@map("tags")
}

model Product {
  id          String   @id @default(uuid())
  title       String
  description String
  price       Int
  oldPrice    Int      @default(0) @map("old_prise")
  images      String[]
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  category Category[]

  tags Tag[]

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  reviews Review[]

  payments Payment[]

  @@map("products")
}

model Review {
  id        String   @id @default(uuid())
  text      String
  rating    Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  product   Product? @relation(fields: [productId], references: [id])
  productId String?

  @@map("reviews")
}

model Payment {
  id     String @id @default(uuid())
  amount Int

  status    PaymentStatus @default(PENDING) @map("status")
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  product   Product? @relation(fields: [productId], references: [id])
  productId String?

  @@map("payments")
}

model Chat {
  id    String @id @default(uuid())
  users User[]

  messages Messages[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Messages {
  id   String @id @default(uuid())
  text String

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  chat   Chat?   @relation(fields: [chatId], references: [id])
  chatId String?

  sender String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

enum Role {
  ADMIN
  SALLER
  USER
  SUPPORT
  MODER
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}
